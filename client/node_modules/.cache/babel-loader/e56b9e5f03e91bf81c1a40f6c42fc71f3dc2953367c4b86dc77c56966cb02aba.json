{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\Real-estate\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem(\"token\"));\n  const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001\";\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const checkAuth = async () => {\n      const storedToken = localStorage.getItem(\"token\");\n      if (storedToken) {\n        try {\n          const response = await fetch(`${API_URL}/api/auth/me`, {\n            headers: {\n              \"x-auth-token\": storedToken\n            }\n          });\n          if (response.ok) {\n            const userData = await response.json();\n            setUser(userData);\n            setToken(storedToken);\n          } else {\n            localStorage.removeItem(\"token\");\n            setToken(null);\n          }\n        } catch (error) {\n          console.error(\"Auth check failed:\", error);\n          localStorage.removeItem(\"token\");\n          setToken(null);\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, [API_URL]);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(`${API_URL}/api/auth/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem(\"token\", data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: \"Network error. Please try again.\"\n      };\n    }\n  };\n  const register = async (name, email, password, userType) => {\n    try {\n      console.log(\"Attempting registration with:\", {\n        name,\n        email,\n        userType\n      });\n      const response = await fetch(`${API_URL}/api/auth/register`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password,\n          userType\n        })\n      });\n      const data = await response.json();\n      console.log(\"Registration response:\", data);\n      if (response.ok) {\n        // If email verification is required, don't set user yet\n        if (data.requiresVerification) {\n          return {\n            success: true,\n            message: data.message,\n            requiresVerification: true,\n            email: data.email\n          };\n        }\n\n        // Otherwise proceed with normal login\n        localStorage.setItem(\"token\", data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return {\n          success: true,\n          user: data.user\n        };\n      } else {\n        console.error(\"Registration failed:\", data.message);\n        return {\n          success: false,\n          message: data.message\n        };\n      }\n    } catch (error) {\n      console.error(\"Registration network error:\", error);\n      return {\n        success: false,\n        message: \"Network error. Please check your connection and try again.\"\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setToken(null);\n    setUser(null);\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user,\n    isBuyer: (user === null || user === void 0 ? void 0 : user.userType) === \"buyer\",\n    isSeller: (user === null || user === void 0 ? void 0 : user.userType) === \"seller\"\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"CqPWeQPIAZcxf1k81ln9DyaZT80=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","context","Error","AuthProvider","children","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","API_URL","process","env","REACT_APP_API_URL","checkAuth","storedToken","response","fetch","headers","ok","userData","json","removeItem","error","console","login","email","password","method","body","JSON","stringify","data","setItem","success","message","register","name","userType","log","requiresVerification","logout","value","isAuthenticated","isBuyer","isSeller","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Real-estate/client/src/context/AuthContext.js"],"sourcesContent":["\"use client\"\r\n\r\nimport { createContext, useContext, useState, useEffect } from \"react\"\r\n\r\nconst AuthContext = createContext()\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext)\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\")\r\n  }\r\n  return context\r\n}\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n  const [token, setToken] = useState(localStorage.getItem(\"token\"))\r\n\r\n  const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001\"\r\n\r\n  // Check if user is authenticated on app load\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      const storedToken = localStorage.getItem(\"token\")\r\n      if (storedToken) {\r\n        try {\r\n          const response = await fetch(`${API_URL}/api/auth/me`, {\r\n            headers: {\r\n              \"x-auth-token\": storedToken,\r\n            },\r\n          })\r\n\r\n          if (response.ok) {\r\n            const userData = await response.json()\r\n            setUser(userData)\r\n            setToken(storedToken)\r\n          } else {\r\n            localStorage.removeItem(\"token\")\r\n            setToken(null)\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Auth check failed:\", error)\r\n          localStorage.removeItem(\"token\")\r\n          setToken(null)\r\n        }\r\n      }\r\n      setLoading(false)\r\n    }\r\n\r\n    checkAuth()\r\n  }, [API_URL])\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/api/auth/login`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      })\r\n\r\n      const data = await response.json()\r\n\r\n      if (response.ok) {\r\n        localStorage.setItem(\"token\", data.token)\r\n        setToken(data.token)\r\n        setUser(data.user)\r\n        return { success: true, user: data.user }\r\n      } else {\r\n        return { success: false, message: data.message }\r\n      }\r\n    } catch (error) {\r\n      return { success: false, message: \"Network error. Please try again.\" }\r\n    }\r\n  }\r\n\r\n  const register = async (name, email, password, userType) => {\r\n    try {\r\n      console.log(\"Attempting registration with:\", { name, email, userType })\r\n\r\n      const response = await fetch(`${API_URL}/api/auth/register`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ name, email, password, userType }),\r\n      })\r\n\r\n      const data = await response.json()\r\n      console.log(\"Registration response:\", data)\r\n\r\n      if (response.ok) {\r\n        // If email verification is required, don't set user yet\r\n        if (data.requiresVerification) {\r\n          return {\r\n            success: true,\r\n            message: data.message,\r\n            requiresVerification: true,\r\n            email: data.email,\r\n          }\r\n        }\r\n\r\n        // Otherwise proceed with normal login\r\n        localStorage.setItem(\"token\", data.token)\r\n        setToken(data.token)\r\n        setUser(data.user)\r\n        return { success: true, user: data.user }\r\n      } else {\r\n        console.error(\"Registration failed:\", data.message)\r\n        return { success: false, message: data.message }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Registration network error:\", error)\r\n      return { success: false, message: \"Network error. Please check your connection and try again.\" }\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\")\r\n    setToken(null)\r\n    setUser(null)\r\n  }\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isBuyer: user?.userType === \"buyer\",\r\n    isSeller: user?.userType === \"seller\",\r\n  }\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}